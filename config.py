# -*- coding: utf-8 -*-

"""
File for dealing with the configuration of Pi2O.py.
"""

import os
import logging
import threading
from ConfigParser import SafeConfigParser, NoSectionError

from zone import GPIORelay, SprinklerZone

__version__ = '0.4'
__all__ = ['CONFIG_FILE', 'LockingConfigParser', 'load_config', 'init_zones', 'save_config', 
           '__version__']


# Logger instance
_LOGGER = logging.getLogger('__main__')


# Maximum number of zones to configure
MAX_ZONES = 4


# Files
## Base path for the various files needed/generated by Pi2O.py
_BASE_PATH = os.path.dirname(os.path.abspath(__file__))

## Configuration
CONFIG_FILE = os.path.join(_BASE_PATH, 'Pi2O.config')


class LockingConfigParser(SafeConfigParser):
    """
    Sub-class of ConfigParser.SafeConfigParser that wraps the get, set, and 
    write methods with a semaphore to ensure that only one get/set/read/write 
    happens at a time.  The sub-class also adds as_dict and from_dict methods
    to make it easier to tie the configuration into webforms.
    """
    
    _lock = threading.RLock()
    
    def get(self, *args, **kwds):
        """
        Locked get() method.
        """
        
        with self._lock:
            value = SafeConfigParser.get(self, *args, **kwds)
        return value
        
    def getint(self, *args, **kwds):
        """
        Locked getint() method.
        """
        
        with self._lock:
            value = SafeConfigParser.getint(self, *args, **kwds)
        return value
        
    def getfloat(self, *args, **kwds):
        """
        Locked getfloat() method.
        """
        
        with self._lock:
            value = SafeConfigParser.getfloat(self, *args, **kwds)
        return value
        
    def set(self, *args, **kwds):
        """
        Locked set() method.
        """
        
        with self._lock:
            SafeConfigParser.set(self, *args, **kwds)
            
    def read(self, *args, **kwds):
        """
        Locked read() method.
        """
        
        with self._lock:
            SafeConfigParser.read(self, *args, **kwds)
            
    def write(self, *args, **kwds):
        """
        Locked write() method.
        """
        
        with self._lock:
            SafeConfigParser.write(self, *args, **kwds)
            
    def as_dict(self):
        """
        Return the configuration as a dictionary with keys structured as
        section-option.
        """
        
        with self._lock:
            configDict = {}
            for section in self.sections():
                for keyword,value in self.items(section):
                    configDict['%s-%s' % (section.lower(), keyword.replace('_', '-'))] = value
                    
        # Done
        return configDict
        
    def from_dict(self, configDict):
        """
        Given a dictionary created by as_dict(), update the configuration 
        as needed.
        """
        
        # Loop over the pairs in the dictionary
        with self._lock:
            for key,value in configDict.iteritems():
                try:
                    section, keyword = key.split('-', 1)
                    keyword = keyword.replace('-', '_')
                    section = section.capitalize()
                    self.set(section, keyword, value)
                except Exception as e:
                    _LOGGER.warning("from_dict with key='%s', value='%s': %s", key, value, str(e))
                    
        # Done
        return True


def load_config(filename):
    """
    Read in the configuration file and return a LockingConfigParser instance.
    """
    
    # Initial configuration file
    config = LockingConfigParser()
    
    ## Dummy information about the four zones:
    ##  1) name - zone nickname
    ##  2) pin - RPi GPIO pin
    ##  3) rate - precipitation rate in inches per hour
    ##  4) enabled - whether or not the zone is active
    ##  _) current_et_value - hidden value to record the ET between restarts
    for zone in xrange(1, MAX_ZONES+1):
        config.add_section('Zone%i' % zone)
        for keyword in ('name', 'pin', 'rate', 'enabled', 'current_et_value'):
            config.set('Zone%i' % zone, keyword, '')
            if keyword == 'enabled':
                config.set('Zone%i' % zone, keyword, 'off')
            elif keyword in ('rate', 'current_et_value'):
                config.set('Zone%i' % zone, keyword, '0.0')
                
    ## Dummy schedule information - one for each month
    ##  1) start - start time as HH:MM, 24-hour format
    ##  2) threshold - accumulated ET threshold before watering
    ##  3) enabled - whether or not the schedule is active
    for month in xrange(1, 13):
        config.add_section('Schedule%i' % month)
        for keyword in ('start', 'threshold', 'enabled'):
            if keyword == 'threshold':
                config.set('Schedule%i' % month, keyword, '0.5')
            elif keyword == 'enabled':
                config.set('Schedule%i' % month, keyword, 'off')
            else:
                config.set('Schedule%i' % month, keyword, '')
                
    ## Dummy weather station information
    ##  1) pws - PWS ID to use for weather info
    ##  2) cn - Crop type numerator constant
    ##  3) cd - Crop type denominator constant
    config.add_section('Weather')
    for keyword in ('pws', 'cn', 'cd'):
        if keyword == 'cn':
            config.set('Weather', 'cn', '900.0')
        elif keyword == 'cd':
            config.set('Weather', 'cd', '0.34')
        else:
            config.set('Weather', keyword, '')
            
    # Try to read in the actual configuration file
    try:
        config.read(filename)
        _LOGGER.info('Loaded configuration from \'%s\'', os.path.basename(filename))
        
    except:
        pass
        
    # Done
    return config


def init_zones(config):
    """
    Given a LockingConfigParser configuration instance, create a list of 
    SprinklerZone instances to control the various zones.
    """
    
    # Create the list of SprinklerZone instances
    zones = []
    zone = 1
    while True:
        try:
            ## Is the zone enabled?
            zoneEnabled = config.get('Zone%i' % zone, 'enabled')
            if zoneEnabled == 'on':
                ### If so, use the real GPIO pin
                zonePin = config.getint('Zone%i' % zone, 'pin')
            else:
                ### If not, use a dummy pin
                zonePin = -1
                
            ## Create the SprinklerZone instance
            zones.append( SprinklerZone(zonePin, 
                                        rate=config.getfloat('Zone%i' % zone, 'rate'), 
                                        current_et_value=config.getfloat('Zone%i' % zone, 'current_et_value'))
                        )
            
            ## Update the counter
            zone += 1
            
        except NoSectionError:
            break
            
    # Done
    return zones


def save_config(filename, config):
    """
    Given a filename and a LockingConfigParser, write the configuration to 
    disk.
    """
    
    fh = open(filename, 'w')
    config.write(fh)
    fh.close()
    
    _LOGGER.info('Saved configuration to \'%s\'', os.path.basename(filename))
